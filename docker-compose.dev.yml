version: "3"
services:
  frontend:
    container_name: frontend-dev
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5000:5173"
    volumes:
      - ./frontend/src:/app/src:ro
      - /app/node_modules
    env_file:
      - ./frontend/.env.development
    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - WDS_SOCKET_PORT=0
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    container_name: backend-dev
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "5001:3000"
    volumes:
      - ./backend/src:/app/src:ro
      - /app/node_modules
    env_file:
      - ./backend/.env.development
    environment:
      - NODE_ENV=development
      - POSTGRES_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: always

  postgres:
    image: postgres:15
    container_name: postgres-dev
    env_file:
      - ./backend/.env.development
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
