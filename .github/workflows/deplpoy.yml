name: Deploy to Synology

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js for backend
      - name: Setup Node.js (Backend)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./backend/package-lock.json

      # 3. Install dependencies for backend
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          if [ ! -f "package-lock.json" ]; then
            npm install --package-lock-only  # package-lock.json이 없으면 생성
          fi
          npm ci  # 의존성 설치

      # 4. Build backend
      - name: Build backend
        working-directory: ./backend
        run: npm run build

      # 5. Setup Node.js for frontend
      - name: Setup Node.js (Frontend)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      # 6. Install dependencies for frontend
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          if [ ! -f "package-lock.json" ]; then
            npm install --package-lock-only  # package-lock.json이 없으면 생성
          fi
          npm ci  # 의존성 설치

      # 7. Build frontend
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # 8. Install sshpass, rsync, and docker-compose (for deployment)
      - name: Install sshpass, rsync & docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync
          # Install docker-compose (if it's not already installed)
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # 9. Set up SSH key for secure connection to Synology
      - name: Set up SSH key for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH 포트를 설정합니다
          SSH_PORT=${{ secrets.SSH_PORT }}
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT=22  # SSH_PORT가 없으면 기본 포트 22를 사용
          fi

          # SSH 키를 확인하고 known_hosts에 추가합니다.
          ssh-keyscan -p $SSH_PORT $SYNOLOGY_HOST >> ~/.ssh/known_hosts

          # 호스트 키를 확인하지 않도록 설정
          echo "Host $SYNOLOGY_HOST" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config

      # 10. Deploy to Synology (using rsync)
      - name: Deploy to Synology (using rsync)
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USERNAME: ${{ secrets.SYNOLOGY_USERNAME }}
          SYNOLOGY_PASSWORD: ${{ secrets.SYNOLOGY_PASSWORD }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          RSYNC_PORT: ${{ secrets.RSYNC_PORT }}
        run: |
          echo "Deploying files to Synology server..." &&

          # 백엔드 빌드 결과물 복사
          rsync -avz --delete-after -e "ssh -p $RSYNC_PORT" backend/dist/ $SYNOLOGY_USERNAME@$SYNOLOGY_HOST:$DEPLOY_PATH/backend/ &&

          # 프론트엔드 빌드 결과물 복사
          rsync -avz --delete-after -e "ssh -p $RSYNC_PORT" frontend/dist/ $SYNOLOGY_USERNAME@$SYNOLOGY_HOST:$DEPLOY_PATH/frontend/ &&

          # docker-compose.yml 파일 복사
          rsync -avz --delete-after -e "ssh -p $RSYNC_PORT" docker-compose.yml $SYNOLOGY_USERNAME@$SYNOLOGY_HOST:$DEPLOY_PATH/

      # 11. Run docker-compose on Synology
      - name: Run docker-compose on Synology
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USERNAME: ${{ secrets.SYNOLOGY_USERNAME }}
          SYNOLOGY_PASSWORD: ${{ secrets.SYNOLOGY_PASSWORD }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          echo "Running docker-compose on Synology server..." &&

          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SYNOLOGY_USERNAME@$SYNOLOGY_HOST" bash << 'EOF'
            cd $DEPLOY_PATH &&
            docker-compose down || true &&
            docker-compose up --build -d
          EOF
