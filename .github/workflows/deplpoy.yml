name: CI/CD for React & NestJS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5435:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-timeout=30s
          --health-retries=3
          --health-start-period=5s

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5. Build Backend Docker image
      - name: Build Backend Docker image
        run: |
          docker-compose -f docker-compose.yml build backend

      # 6. Build Frontend Docker image
      - name: Build Frontend Docker image
        run: |
          docker-compose -f docker-compose.yml build frontend

      # 7. Run Tests (Backend)
      - name: Run Backend Tests
        run: |
          docker-compose -f docker-compose.yml up -d backend
          docker-compose -f docker-compose.yml exec backend npm run test

      # 8. Run Tests (Frontend)
      - name: Run Frontend Tests
        run: |
          docker-compose -f docker-compose.yml up -d frontend
          docker-compose -f docker-compose.yml exec frontend npm run test

      # 9. Copy Files for Deployment (Optional Step)
      - name: Copy Files for Deployment Preparation
        run: |
          mkdir dist/
          cp -r backend/dist/* dist/
          cp -r frontend/build/* dist/

      # 10. Deploy to Synology (using rsync)
      - name: Deploy to Synology (using rsync)
        env:
          SYNOLOGY_HOST: ${{ secrets.SYNOLOGY_HOST }}
          SYNOLOGY_USERNAME: ${{ secrets.SYNOLOGY_USERNAME }}
          SYNOLOGY_PASSWORD: ${{ secrets.SYNOLOGY_PASSWORD }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          # Install necessary tools
          sudo apt-get update && sudo apt-get install -y sshpass rsync

          # Add the host to known hosts to prevent SSH prompts
          mkdir -p ~/.ssh
          ssh-keyscan -p $SSH_PORT $SYNOLOGY_HOST >> ~/.ssh/known_hosts

          echo "Connecting to Synology server..."

          # Use rsync to deploy the files
          rsync -avz -e "sshpass -p $SYNOLOGY_PASSWORD ssh -p $SSH_PORT" dist/ $SYNOLOGY_USERNAME@$SYNOLOGY_HOST:$DEPLOY_PATH

      # 11. Shutdown Docker Compose environment
      - name: Shut down Docker Compose environment
        run: |
          docker-compose down
